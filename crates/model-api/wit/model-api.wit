package example:host;

world model-world {
  import print: func(msg: string);

  record point3 {
    x: f64,
    y: f64,
    z: f64,
  }

  resource edge-iterator {
    constructor(face: borrow<face>);
    new-from-shape: static func(shape: borrow<shape>) -> edge-iterator;
    next: func() -> option<edge>;
  }

  resource approximation-segment-iterator {
    constructor(edge: borrow<edge>);
    next: func() -> option<point3>;
  }

  resource face-iterator {
    constructor(shape: borrow<shape>);
    next: func() -> option<face>;
  }

  resource fillet-maker {
    constructor(shape: borrow<shape>);
    add-edge: func(radius: f64, edge: borrow<edge>);
    build: func() -> shape;
  }

  resource chamfer-maker {
    constructor(shape: borrow<shape>);
    add-edge: func(distance: f64, edge: borrow<edge>);
    build: func() -> shape;
  }

  resource wire-builder {
    constructor();
    add-edge: func(edge: borrow<edge>);
    build: func() -> wire;
  }

  resource wire {

  }

  resource face {
    from-wire: static func(w: borrow<wire>) -> face;
    fillet: func(radius: f64) -> face;
    extrude: func(dir: point3) -> solid;
    outer-wire: func() -> wire;
    center-of-mass: func() -> point3;
  }

  resource shell {

  }

  resource solid {

  }

  resource compound {

  }

  enum edge-type {
      line,
      circle,
      ellipse,
      hyperbola,
      parabola,
      bezier-curve,
      b-spline-curve,
      offset-curve,
      other-curve,
  }

  resource edge {
    edge-type: func() -> edge-type;
    segment: static func(p1: point3, p2: point3) -> edge;
    circle: static func(center: point3, normal: point3, radius: f64) -> edge;
    arc: static func(p1: point3, p2: point3, p3: point3) -> edge;
    start-point: func() -> point3;
    end-point: func() -> point3;
  }

  resource shape {
    from-edge: static func(w: borrow<edge>) -> shape;
    from-wire: static func(w: borrow<wire>) -> shape;
    from-face: static func(w: borrow<face>) -> shape;
    from-shell: static func(w: borrow<shell>) -> shape;
    from-solid: static func(w: borrow<solid>) -> shape;
    from-compound: static func(w: borrow<compound>) -> shape;
    box-from-corners: static func(p1: point3, p2: point3) -> shape;
    subtract: func(shape: borrow<shape>) -> (shape: shape, edges: list<edge>);
  }

  export init-model: func();
  export run: func() -> shape;
}
